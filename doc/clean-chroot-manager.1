.\" Text automatically generated by txt2man
.TH clean-chroot-manager 1 "23 September 2015" "" ""
.SH NAME
\fBclean-chroot-manager \fP- Wrapper script to manage clean chroots for building packages under Arch Linux.
\fB
.SH DESCRIPTION
ccm provides a "one-click" solution for building packages in a clean chroot. A key point that differentiates ccm from the arch-build-scripts is that ccm automatically manages a local repo within the chroot so dependencies that you build are pulled transparently from that local repo. This is helpful if building a package that has a dependency that also has to be built (i.e. one that is not available from the Arch repos). Another key point of differentiation is that ccm can build packages using distcc.
.PP
An illustrative example, let's say that we want to build "bar" from the AUR. "Bar" has a build dependency of "foo" which is also in the AUR. Rather than first building "foo", then installing "foo", then building "bar", and finally removing "foo", the local repo will save a copy of foo.pkg.tar.xz which is indexed automatically therein. Pacman within the chroot is aware of the "foo" package thanks to the local repo. So, when the user tries to build "bar", pacman will silently grabs foo.pkg.tar.xz from the local repo as any other dependency.
.SH SETUP
$XDG_CONFIG_HOME/clean-chroot-manager.conf (referred to as "the config file" hereafter) will be created on the first invocation of ccm and contains all user managed settings. Edit this file prior to running ccm a second time. Make sure the user running ccm has sudo rights to execute /usr/bin/clean-chroot-manager or /usr/bin/ccm.
.SH USAGE
sudo ccm64 [option]
sudo ccm32 [option]
.PP
Note that 'ccm64' will build packages in a 64-bit chroot while 'ccm32' will build packages in a 32-bit chroot. If invoked without a numerical suffix, 'ccm' will default to the 64-bit chroot.
.SH OPTIONS
.TP
.B
p
Preview settings. Show some bits about the chroot itself.
.TP
.B
c
Create a clean chroot.
.TP
.B
u
Update the packages inside the chroot. The equivalent of `pacman \fB-Syu\fP` in the chroot.
.TP
.B
t
Toggle [testing] and [community-testing] on/off in the chroot. This function will enable or disable the testing repos in the chroot and also take care of upgrading/downgrading any affected packages.
.TP
.B
m
Toggle [multilib] on/off in the chroot. This function will enable or disable the multilib repo in the chroot and also take care of upgrading/downgrading any affected packages. For obvious reasons this option is only available when building for x86_64.
.TP
.B
s
Run makepkg in build mode under the chroot. The equivalent of `makepkg \fB-src\fP` in the chroot.
.TP
.B
S
Run makepkg in build mode under the chroot but do not clean it. Useful if building a series of packages with highly similar deps.
.TP
.B
l
List the contents of the local repo (i.e. the packages built to date) should any exist.
.TP
.B
d
Delete the ENTIRE contents of the local repo.
.TP
.B
n
Nuke the clean chroot (delete it and everything under it).
.SH TIPS
.IP \(bu 3
Since ccm requires sudo rights, consider making an alias for invoking it as such in ~/.bashrc or the like. For example: alias ccm64='sudo ccm64' and alias ccm32='sudo ccm32' will do the trick.
.IP \(bu 3
If you have multiple PCs on your LAN, consider having them help you compile via distcc which is supported within ccm. See $XDG_CONFIG_HOME/clean-chroot-manager.conf for setup instructions.
.IP \(bu 3
If your machine has lots of memory, consider locating the chroot to tmpfs to minimize access times and avoid disk usage.
.PP
One way is to simply define a directory to mount as tmpfs like so in /etc/fstab:
.PP
.nf
.fam C
 tmpfs /scratch tmpfs nodev,size=10G 0 0

.fam T
.fi
In order to have the expected CHROOTPATH64 and CHROOTPATH32 directories created, we can use a systemd tmpfile like so:
.PP
.nf
.fam C
 /etc/tmpfiles.d/ccm_dirs.conf
 d /scratch/.chroot64 0755 facade users -
 d /scratch/.chroot32 0755 facade users -

.fam T
.fi
.SH USAGE EXAMPLES
Create a clean 64-bit chroot under the path defined in the config file:
.PP
.nf
.fam C
 $ sudo ccm64 c

.fam T
.fi
Create a clean 32-bit chroot under the path defined in the config file:
.PP
.nf
.fam C
 $ sudo ccm32 c

.fam T
.fi
Attempt to build the package in the clean 64-bit chroot. If successful, the package will be added to a local pacman repo inside the chroot so that it will be available for use as a dependency for building other packages:
.PP
.nf
.fam C
 $ cd /path/to/PKGBUILD
 $ sudo ccm64 s

.fam T
.fi
List out the contents of the 64-bit chroot's local repo assuming something has been built. Useful to see what is present:
.PP
.nf
.fam C
 $ sudo ccm64 l

.fam T
.fi
Deletes everything under the top level of the 64-bit chroot effectively removing it from the system:
.PP
.nf
.fam C
 $ sudo ccm64 n

.fam T
.fi
.SH BUGS
.IP \(bu 3
Currently, an open bug against core/devtools can cause the building of VCS packages (brz, git, svn, etc.) to fail. This is not due to ccm, See https://bugs.archlinux.org/task/39097
.IP \(bu 3
If the PKGBUILD redefines the PKGEXT variable from its default value, ccm will fail to incorporate it into the local repo. The current default defined upstream is: .pkg.tar.xz.
.SH AUTHOR
graysky (graysky AT archlinux DOT us).
